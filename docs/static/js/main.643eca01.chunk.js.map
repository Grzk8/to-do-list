{"version":3,"sources":["components/Layout/Input/Input.js","components/Layout/Button/Button.js","components/Login/Login.js","components/CreateNewAccount/CreateNewAccount.js","components/NewList/List/List.js","components/NewList/NewList.js","components/List/List.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputElement","inputClasses","className","join","config","placecholder","id","onChange","changed","value","label","button","onClick","clicked","disabled","children","Login","state","controls","identifier","type","placeholder","validation","required","valid","touched","password","minLength","logged","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","getToken","ident","pass","data","fetch","method","body","JSON","stringify","headers","then","response","ok","handleSubmitForm","e","preventDefault","is","rules","isValid","trim","minLenght","length","maxLenght","formElementsArray","key","this","push","form","map","formElement","Input","invalid","redirect","to","onSubmit","Button","href","Component","CreateNewAccount","username","email","passwordRepeat","confirmed","user","mail","console","log","List","taskId","isDoneHandler","isDone","name","NewList","listName","date","term","task","inputListNameHandler","taskChangeHandler","submitHandler","dateNow","Date","toLocaleDateString","updatedTask","Math","random","taskIndex","findIndex","p","tsk","confirmHandler","index","show","showNewList","newListHandler","backToListHandler","loadData","localStorage","clear","window","location","list","logout","selected","newList","layout","App","routes","path","exact","component","NewAccount","Layout","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.643eca01.chunk.js","sourcesContent":["import React from 'react';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    const inputClasses = [inputElement];\n\n    inputElement = <input className={inputClasses.join(' ')} \n        {...props.config}\n        className='InputElement'\n        placecholder={props.placecholder}\n        id={props.id} \n        onChange={props.changed} \n        value={props.value}\n        />\n\n    return (\n        <div>\n            <label>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n};\n\nexport default input;","import React from 'react';\n\nconst button = (props) => (\n    <button\n    onClick={props.clicked}\n    className={props.className}\n    disabled={props.disabled}\n    >{props.children}</button>\n);\n\nexport default button;","import React, {Component} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport Input from '../Layout/Input/Input';\nimport Button from '../Layout/Button/Button';\n\nclass Login extends Component {\n    state = {\n        controls: {\n            identifier : {\n                config: {\n                    type: 'string',\n                    placeholder: 'Email or Username',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                config: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        logged: false\n    };\n\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if(rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLenght) {\n            isValid = value.length >= rules.minLenght && isValid;\n        }\n        if(rules.maxLenght) {\n            isValid = value.length <= rules.maxLenght && isValid;\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    };\n\n    getToken = (ident, pass) => {\n        let data = {\n            'identifier': ident,\n            'password': pass\n        }\n\n        let url = 'https://recruitment.ultimate.systems/auth/local';\n        \n        fetch(url,{method: 'POST',\n        body:JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json',\n            'accept': 'application/json'}\n        }).then(response => {if(response.ok) {this.setState({logged: true})}})\n    }\n\n    handleSubmitForm = (e) => {\n        e.preventDefault();\n        this.getToken(this.state.controls.identifier.value, this.state.controls.password.value, this.state.is);\n        \n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.controls[key]\n            });\n        };\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                config={formElement.config.config}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                />\n        ));\n\n        let redirect = null;\n        if(this.state.logged === true){\n            redirect = <Redirect to='/main'/>\n        }\n        return (\n            <div className='login'>\n                <h1>Login</h1>\n                \n                <form onSubmit={this.handleSubmitForm}>\n                    {form}\n                    <Button>Login</Button>\n                </form>\n                {redirect}\n                <p>or</p>\n                <a href='/create_account'>create an account</a>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React, {Component} from 'react';\n\nimport Input from '../Layout/Input/Input';\nimport Button from '../Layout/Button/Button';\n\nclass CreateNewAccount extends Component {\n    state = {\n        controls: {\n            username : {\n                config: {\n                    type: 'string',\n                    placeholder: 'Username',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            email : {\n                config: {\n                    type: 'email',\n                    placeholder: 'Email',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                config: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            passwordRepeat: {\n                config: {\n                    type: 'password',\n                    placeholder: 'Repeat password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    confirmed: true\n                },\n                valid: false,\n                touched: false\n            },\n        },\n    }\n\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if(rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLenght) {\n            isValid = value.length >= rules.minLenght && isValid;\n        }\n        if(rules.maxLenght) {\n            isValid = value.length <= rules.maxLenght && isValid;\n        }\n        if(rules.confirmed) {\n            isValid = value === this.state.controls.password.value;\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    };\n\n    getToken = (user, mail, pass) => {\n        let data = {\n            'username': user,\n            'email': mail,\n            'password': pass\n        }\n\n\n        console.log(data)\n\n        let url = 'https://recruitment.ultimate.systems/auth/local/register';\n\n        fetch(url,{method: 'POST',\n        body:JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json',\n            'accept': 'application/json'}\n        }).then(response => console.log(response))\n    }\n\n    handleSubmitForm = (e) => {\n        e.preventDefault();\n        this.getToken(this.state.controls.username.value, this.state.controls.email.value, this.state.controls.passwordRepeat.value)\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.controls[key]\n            });\n        };\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                config={formElement.config.config}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                />\n        ))\n        \n        return (\n            <div className='createAccount'>\n                <a className=\"goBack\" href=\"/\"></a>\n                <h1>Create an new account</h1>\n                <form onSubmit={this.handleSubmitForm}>\n                    {form}\n                    <Button>Create</Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default CreateNewAccount;","import React from 'react';\n\nconst List = props => (\n  <ul>\n        <li className='tasksList' key={props.taskId}><div onClick={props.isDoneHandler}>{props.isDone}</div>{props.name}</li>\n  </ul>\n);\n\nexport default List;","import React, {Component} from 'react';\n\nimport Input from '../Layout/Input/Input';\nimport Button from '../Layout/Button/Button'\nimport List from './List/List';\n\nclass NewList extends Component {\n    state = {\n        listName: '',\n        date: '',\n        term: '',\n        id: '',\n        isDone: false,\n        task: [\n          { name: null, isDone: false, taskId: null}\n        ]\n    }\n\n    inputListNameHandler = (event) => {\n    this.setState({listName: event.target.value}) \n    console.log(this.state.listName, this.state.id) \n    }\n\n    taskChangeHandler = (event) => {\n        this.setState({term: event.target.value});\n      }\n\n      submitHandler = (event) => {\n        event.preventDefault()\n        const dateNow = new Date().toLocaleDateString();\n        const updatedTask = {\n            name: this.state.term,\n            isDone: false,\n            id: Math.random(),\n            \n            date: dateNow,\n        }\n        this.setState({\n          term: '',\n          task: [...this.state.task, updatedTask]\n        });\n        console.log(this.state)\n      }\n\n      isDoneHandler = (event, id) => {\n        const taskIndex = this.state.task.findIndex(p =>{\n          return p.id === id\n        });\n        const tsk = {...this.state.task [taskIndex]};\n        tsk.isDone = !tsk.isDone;\n        const task = [...this.state.task];\n        task[taskIndex] = task;\n\n        this.setState({task: task})\n        console.log(this.state.task)\n      }\n\n      confirmHandler = (event) => {\n        \n        const data = this.state\n        let url = 'https://recruitment.ultimate.systems/to-do-lists'\n\n        fetch(url,{method:'POST',\n          body:JSON.stringify(data),\n          headers: {\n          'Content-Type': 'application/json',\n          'accept': 'application/json'}\n        }).then(response => (console.log(response)))\n      }\n\n    render() {\n    \n      let listName = <div className='listName'>\n        <Input\n          value={this.state.listName}\n          changed={(event) => this.inputListNameHandler(event)}/>\n          <div className='line'></div>\n      </div>\n        \n        return <>\n\n        {listName}\n\n        \n\n      <div className='tasks'>\n\n        <div className='list'>\n          {this.state.task.map((tsk, index) => {\n          return <List name={tsk.name} isDone={tsk.isDone} taskId={tsk.taskId} isDoneHandler={(event)=> this.isDoneHandler(event, tsk.taskId)}/>\n          })}\n        </div>\n\n        <div className='tasks'>\n          <form className=\"App\" onSubmit={this.submitHandler}>\n            <input className='taskName'placeholder='Task name' value={this.state.term} onChange={this.taskChangeHandler} />\n            <Button className='addButton'>Add</Button>\n          </form>\n          <Button className='cancelTask'>Cancel</Button>\n        </div>\n\n      </div>\n\n        <Button clicked={this.props.show} className='buttonCancel'>CANCEL</Button>\n        <Button className='buttonSave' clicked={this.props.show, (event) => this.confirmHandler(event)}>SAVE</Button>\n        </>\n    }\n}\n\nexport default NewList;","import React, {Component} from 'react';\n\nimport NewList from '../NewList/NewList'\n\nclass List extends Component {\n    state= {\n        showNewList: false\n    };\n\n    newListHandler = () => {\n        this.setState({showNewList: true})\n    }\n\n    backToListHandler = () => {\n        this.setState({showNewList: false})\n    }\n\n    logout() {\n        localStorage.clear();\n        window.location.href = '/';\n    }\n\n    loadData = () => {\n\n        let url = 'https://recruitment.ultimate.systems/to-do-lists/count';\n\n        fetch(url,{method:'GET',\n        body:JSON.stringify,\n        headers: {\n        'accept': 'application/json'}\n      }).then(response => (console.log(response)))\n    }\n\n\n\n    render() {\n\n        let list = <div>\n            <div className='backToList' onClick={this.logout}></div>\n            <div className='backToListArrow' onClick={this.logout}></div>\n\n            <div className='toDoList'>\n                <input className='search'placeholder='Search' ></input>\n                \n                <select className='sort'placeholder='Sort by' >\n                  <option value=\"name\">Name</option>\n                  <option value=\"date\" selected>Date</option>\n                  <option value=\"complated\">Complated</option>\n                </select>\n\n            </div>\n    \n            <div className='addList' onClick={this.newListHandler}></div>\n            <div className='addListLine' onClick={this.newListHandler}></div>\n            <div className='addListLine2' onClick={this.newListHandler}></div>\n        </div>\n        let newList = <NewList show={this.backToListHandler}/>\n\n        if (this.state.showNewList) {\n            return newList\n        }\n        return list;\n\n    }\n}\n\nexport default List;","import React from 'react';\n\nconst layout = (props) => (\n    <div className='layout'>\n        <div className='logo'>ToDo-List</div>\n        <div className='mainContainer'>\n            {props.children}\n        </div>\n\n    </div>\n);\n\nexport default layout;","import React from 'react';\nimport { Route, Switch} from 'react-router-dom';\n\nimport Login from './components/Login/Login';\nimport NewAccount from './components/CreateNewAccount/CreateNewAccount';\nimport List from './components/List/List';\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n\n  let routes = (\n    <Switch>\n      <Route path='/' exact component={Login}/>\n      <Route path='/create_account/' component={NewAccount}/>\n      <Route path='/main/' component={List}/>\n    </Switch>\n  );\n  \n  return(\n    <>\n      <Layout>\n        {routes}\n      </Layout>\n    </>\n  )\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./scss/main.scss\";\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}